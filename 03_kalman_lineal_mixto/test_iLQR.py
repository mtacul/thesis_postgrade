# -*- coding: utf-8 -*-
"""
Created on Sun Dec  8 20:54:59 2024

@author: nachi
"""

import functions_03_rw
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.linalg import solve_discrete_are
import control


deltat = 2
# limite =  5762*69
limite =  5762*3
t = np.arange(0, limite, deltat)

#%% Parámetros geométricos y orbitales dados

w0_O = 0.00163

I_x = 0.037
I_y = 0.036
I_z = 0.006

m_s0 = 0.06 #kg
m_s1 = m_s0
m_s2 = m_s0

b_0 = 0.05
b_1 = 0.05
b_2 = 0.15

I_s0_x = 0.005
I_s1_x = I_s0_x
I_s2_x = I_s0_x

I_s0_y = 0.005
I_s1_y = I_s0_y
I_s2_y = I_s0_y

I_s0_z = 0.004
I_s1_z = I_s0_z
I_s2_z = I_s0_z	

J_x = I_x + I_s0_x + I_s1_x + I_s2_x + m_s1*b_1**2 + m_s2*b_2**2
J_y = I_y + I_s0_y + I_s1_y + I_s2_y + m_s0*b_0**2 + m_s2*b_2**2
J_z = I_z + I_s0_z + I_s1_z + I_s2_z + m_s0*b_0**2 + m_s1*b_1**2

# _mod de modelo
hh = deltat

deltat = 2
bi_orbit = [-8.991298983741396e-06,
-5.907147530097531e-06,
-4.5687558794566606e-05]

b_body_i = [-8.991298983741396e-06,
-5.907147530097531e-06,
-4.5687558794566606e-05]

si_orbit = [0.776906,
0.57818,
-0.249251]
s_body_i = [0.776906,
0.57818,
-0.249251]


A_discretee = np.array([
    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, -1.38567e-10, 0, 1, 0.000422084, 0, -2.12526e-07, -0.000137263, 0, 0, 0, 0, 0, 0],
    [0, -1.9842e-09, 1, 0, -0.00151601, 1, 0, -0.00056993, 8.6575e-08, 0, 0, 0, 0, 0, 0],
    [-9.56484e-07, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 6.88725e-06, -4.15701e-10, 0, 1, 0.000844169, 0, -6.37578e-07, -0.000274527, 0, 0, 0, 0, 0, 0],
    [0, -5.95261e-09, -7.43188e-07, 0, -0.00303203, 0.999999, 0, -0.00113986, 2.59725e-07, 0, 0, 0, 0, 0, 0],
    [1.15136e-21, 0, 0, -4.82914e-15, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, -7.87562e-06, 4.15701e-10, 0, -2.24185e-06, -0.000844169, 0, 1, 0.000274527, 0, 0, 0, 0, 0, 0],
    [0, 5.95261e-09, 7.43188e-07, 0, 0.00303203, 1.17025e-06, 0, 0.00113986, 1, 0, 0, 0, 0, 0, 0],
    [2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 2, -6.92835e-11, 0, 1, 0.00028139, 0, -1.06263e-07, -9.15088e-05, 0, 1, 0, 0, 0, 0],
    [0, -9.92102e-10, 2, 0, -0.00101068, 1, 0, -0.000379953, 4.32875e-08, 0, 0, 1, 0, 0, 0],
    [-9.56484e-07, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 6.88725e-06, -2.77134e-10, 0, 2, 0.000844169, 0, -4.25052e-07, -0.000274526, 0, 0, 0, 0, 1, 0],
    [0, -3.96841e-09, -7.43189e-07, 0, -0.00303203, 2, 0, -0.00113986, 1.7315e-07, 0, 0, 0, 0, 0, 1]
])

B_discretee = np.array([
    [20.6186, 0, 0],
    [0, 21.0526, 0.00319961],
    [0, -0.089269, 69.9301],
    [41.2371, 0, 0],
    [0, 42.1052, 0.00959882],
    [0, -0.267807, 139.86],
    [358.763, 0, 0],
    [0, 357.895, -0.00959882],
    [0, 0.267807, 360.14],
    [13.7457, 0, 0],
    [0, 14.0351, 0.0015998],
    [0, -0.0446345, 46.62],
    [41.2371, 0, 0],
    [0, 42.1052, 0.00639921],
    [0, -0.178538, 139.86]
])

Aa = np.array([
    [0, 0, -0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [-0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, -0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [-4.78242e-07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 3.44362e-06, 0, 0, 0, 0.000422084, 0, 0, -0.000137263, 0, 0, 0, 0, 0, 0],
    [0, 0, -3.71594e-07, 0, -0.00151601, 0, 0, -0.00056993, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, -0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, -3.93781e-06, 0, 0, 0, -0.000422084, 0, 0, 0.000137263, 0, 0, 0, 0, 0, 0],
    [0, 0, 3.71594e-07, 0, 0.00151601, 0, 0, 0.00056993, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
])

Ba = np.array([
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
    [20.6186, 0, 0],
    [0, 21.0526, 0],
    [0, 0, 69.9301],
    [179.381, 0, 0],
    [0, 178.947, 0],
    [0, 0, 180.07],
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0]
])

[A,B,A_discrete,B_discrete] = functions_03_rw.A_B(I_x,I_y,I_z,w0_O,0,0,0 , I_s0_x, I_s1_y, I_s2_z, 0,0,0, J_x, J_y, J_z, deltat, hh, bi_orbit,b_body_i, s_body_i)

# asd
#%% Control LQR

# Definir las matrices Q y R del coste del LQR
diag_Q = np.array([10, 10, 10, 0.1, 0.1, 0.1, 10, 10, 10, 10, 10, 10, 0.1, 0.1, 0.1])*1
# diag_Q = np.array([10, 10, 10, 0.1, 0.1, 0.1, 10, 10, 10])*1
diag_R = np.array([diag_Q[6],diag_Q[7],diag_Q[8]])
Q = np.diag(diag_Q)
R = np.diag(diag_R)

print(A_discrete.shape)
print(B_discrete.shape)
print(Q.shape)
print(R.shape)



# # Resolver la ecuación de Riccati
# P = solve_discrete_are(A_discrete, B_discrete, Q, R)

# # Calcular la matriz de retroalimentación K
# K = np.linalg.inv(B_discrete.T @ P @ B_discrete + R) @ (B_discrete.T @ P @ A_discrete)


K, P, eigenvalues = control.dlqr(A_discrete, B_discrete, Q, R)